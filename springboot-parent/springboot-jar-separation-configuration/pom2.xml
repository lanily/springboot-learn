<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>springboot-parent</artifactId>
    <groupId>com.hsiao.springboot</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>springboot-jar-separation-configuration</artifactId>
  <properties>

  </properties>

  <!--
  (1). config : #将Spring的一些xml配置更改为基于java的配置,比如：整合Mybatis 整合Druid数据源,这些配置中一些基本配置都是写死的,因为它们不是经常变化的(可以参考前面写的一些博客)
  (2). HelloApplication : #Spring Boot启动入口,内含main方法
  (3).(4).(5).src/main/resources/config :
      app-dev.properties : #该文件放到src/main/resources下也是可以加载的
      logback-spring.xml : #日志文件,默认要放到src/main/resources下,如果放到src/main/resources/config下,就需要在application.properties中配置logging.config=classpath:config/logback-spring.xml
      path.properties : #放置一些调用第三方服务的接口地址,避免放在application.properties造成数据太多
  (6).src/main/resources/static : #css,js,图片等静态资源存放路径
  (7).src/main/resources/templates : #Thymeleaf模板,动态页面,类似于jsp
  (8).src/main/build : #package.xml 中存放这篇博客的核心,就是将 配置文件从jar中抽离
  -->
  <build>
    <!--jar包名字 -->
    <finalName>${project.artifactId}-${profiles.active}</finalName>
    <!--打包时 排除jar包里面的配置文件，后面会将配置文件打在jar同级的config目录下 -->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>application.yml</include>
          <include>application-${profiles.active}.yml</include>
        </includes>
        <excludes>
          <exclude>*.properties</exclude>
          <exclude>*.xml</exclude>
        </excludes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>templates/**</include>
          <include>static/**</include>
          <include>mapper/**</include>
          <include>freemark/**</include>
          <include>*.properties</include>
        </includes>
      </resource>
    </resources>
    <plugins>

      <!-- 方案二
      1. maven-jar-plugin
      2. maven-assembly-plugin 这里依赖assembly.xml 描述文件
      在用Maven打包项目时，要像Hadoop、Spark、Hive等项目打包之后的文件包含bin、lib、conf之类的文件夹，同时可以动态的修改项目的配置参数，需要如下两步：
      1. 在 pom.xml 文件中引入 maven-assembly 插件；
      2. 在 assembly.xml 文件中制定各个文件目录。-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
      <!-- 分离打包开始 -->
      <!-- 跳过测试代码 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <!-- 把target/classes/下的文件导入到jar内 -->
          <classesDirectory>target/classes/</classesDirectory>
          <finalName>${project.artifactId}-${project.version}</finalName>
          <archive>
            <manifest>
              <!-- 指定程序入口 -->
              <!-- 指定入口类 -->
              <mainClass>com.hsiao.springboot.Application</mainClass>
              <!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 -->
              <!-- jar包不包含唯一版本标识 -->
              <useUniqueVersions>false</useUniqueVersions>
              <!--  表示需要加入到类构建路径 -->
              <addClasspath>true</addClasspath>
              <!-- 服务依赖的jar包放在lib目录下 -->
              <!-- MANIFEST.MF 中 Class-Path 加入前缀 指定生成的Manifest文件中Class-Path依赖lib前面都加上路径,构建出lib/xx.jar -->
              <classpathPrefix>lib/</classpathPrefix>
              <!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 -->
              <addMavenDescriptor>false</addMavenDescriptor>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
            <manifestEntries>
              <!--MANIFEST.MF 中 Class-Path 加入资源文件目录 -->
              <Class-Path>./resources/</Class-Path>
            </manifestEntries>
          </archive>
          <!-- jar包中不包括以下文件 -->
          <!-- 不打包资源文件（配置文件和依赖包分开） -->
          <excludes>
            <exclude>mapper/**</exclude>
            <exclude>static/**</exclude>
            <exclude>templates/**</exclude>
            <exclude>**/*.yml</exclude>
            <exclude>**/*.xml</exclude>
            <exclude>**/*.properties</exclude>
            <exclude>*.yml</exclude>
            <exclude>*.properties</exclude>
            <exclude>*.xml</exclude>
            <exclude>*.txt</exclude>
          </excludes>
          <outputDirectory>${project.build.directory}</outputDirectory>
        </configuration>
      </plugin>
      <!--Springboot基于assembly服务化实现打包-->
      <!--      注：
生成的tar.gz文件的名字为：maven-assembly-plugin插件中配置的 “finalName-assembly.xml配置的id”(若assembly中没有指定id，则只有前半部分。
assembly.xml具体配置如下：
将application.yml放在外部config目录下
所有依赖打成zip压缩包（还可以打成其他类型包https://www.cnblogs.com/f-zhao/p/6929814.html）
-->
      <plugin>
        <!--主要使用的是maven提供的assembly插件完成-->
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <!-- 打包后的包名是否包含assembly的id名 -->
          <!--自定义的configuration配置后，将会生成一个demo-demo.jar 文件在目录 output 下，其中前一个demo
                            来自finalName，后一个demo来自assembly descriptor中的id，其中的内容和默认的打包出来的jar类似，
                            如果只想有finalName，则增加配置：<appendAssemblyId/>-->
          <appendAssemblyId>false</appendAssemblyId>
          <!-- 指定最后tar或者zip包的名字 -->
          <!--                <finalName>gateway</finalName>-->
          <!-- tar或者zip包的输出目录 -->
          <!-- ../ 是指当前项目的根目录 ，例如：F:\pvpsddp\pvpsddp-gateway 的上一级-->
          <!--                <outputDirectory>${project.build.directory}/dist/</outputDirectory>-->
          <descriptors>
            <!--具体的配置文件-->
            <!-- 引用的assembly配置文件，可以用多个，即可以同时打包多个格式的包 -->
            <descriptor>src/main/assembly/assembly.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <!-- phase加入package后，则在执行maven package时就可以调用maven-assembly-plugin插件定义的打包方式 -->
          <execution>
            <!--名字任意 -->
            <id>make-assembly</id>
            <!-- 绑定到package生命周期阶段上 -->
            <phase>package</phase>
            <!--运行一次-->
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>


</project>
